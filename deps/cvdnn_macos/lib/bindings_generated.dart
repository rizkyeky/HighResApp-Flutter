// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

/// Bindings for `src/cvdnn_macos.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CvdnnMacosBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CvdnnMacosBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CvdnnMacosBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void initNetFromOnnx(
    ffi.Pointer<pkg_ffi.Utf8> modelPath,
  ) {
    return _initNetFromOnnx(
      modelPath,
    );
  }

  late final _initNetFromOnnxPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Utf8>)>>(
          'initNetFromOnnx');
  late final _initNetFromOnnx = _initNetFromOnnxPtr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.Utf8>)>();

  void generateImage(
    ffi.Pointer<pkg_ffi.Utf8> imagePath,
    ffi.Pointer<pkg_ffi.Utf8> outputPath,
  ) {
    return _generateImage(
      imagePath,
      outputPath,
    );
  }

  late final _generateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.Utf8>,
              ffi.Pointer<pkg_ffi.Utf8>)>>('generateImage');
  late final _generateImage = _generateImagePtr.asFunction<
      void Function(ffi.Pointer<pkg_ffi.Utf8>, ffi.Pointer<pkg_ffi.Utf8>)>();
}
